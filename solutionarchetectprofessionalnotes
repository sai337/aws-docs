network connectivity stratagies: vpc peering, direct connect, transit gateway, private link, site-to-site vpn, aws vpn

security controls:

foundations
identity access managment - iam access analyzer, iam policies, roles, scp, resource policies and bucket policies - iam , iam identity center(sso), cognito and sts
Data protection - KMS, cloudHSM

applation security: like sql injection or cross site - network firewall, waf, sheild, sheild, firewall manager 

-----------------------------------------------------------------------------------------------------------------------------------
aws skill builder courses:

https://explore.skillbuilder.aws/learn/course/1283/play/63715/online-course-supplement-advanced-architecting-on-aws
https://medium.com/@pbijjala/study-material-aws-solution-architect-professional-b6855cd12773
https://explore.skillbuilder.aws/learn/lp/1044/solutions-architect-learning-plan
aws solutions library - https://aws.amazon.com/solutions/implementations/centralized-logging/


-----------------------------------------------------------------------------------------------------------------------------------
white paper: Implementing Microservices on AWS

RDS - 6 engines- can not autoscale on demand
nosql - autoscale on demand - dynamoDB, DynamoDB DAX

api implementaion -> cloudfront -> apigateway -> backed ec2, lambda, ecs or eks
Requests from mobile devices, websites, or other backend services are routed to the closest CloudFront Point of Presence (PoP) to minimize latency and provide optimum user experience.


serverless microservices:

ui -> cloudfront - s3, backend -> apigateway-> lambda , Db-> aurora, DynamoDB

Disaster recovery:
typical microservices applications are implemented using the Twelve-Factor Application patterns

Recovery time objective is the maximum acceptable delay between the interruption of service and restoration of service. This objective determines what is considered an acceptable time window when service is unavailable and is defined by the organization.

Recovery point objective is the maximum acceptable amount of time since the last data recovery point. This objective determines what is considered an acceptable loss of data between the last recovery point and the interruption of service and is defined by the organization.

high availabity:

eks - runs control plane runs , 2 api servers , 3 etcd across az's
lambdaa - runs across az's incase of service interruptions in any az.

deploying lambda based apps: aws sam - AWS SAM is natively supported by AWS CloudFormation and defines a simplified syntax for expressing serverless resources. To deploy your application, specify the resources you need as part of your application, along with their associated permissions policies in a AWS CloudFormation template, package your deployment artifacts, and deploy the template. Based on AWS SAM, SAM Local is an AWS Command Line Interface (AWS CLI) tool that provides an environment for you to develop, test, and analyze your serverless applications locally before uploading them to the Lambda runtime. You can use AWS SAM Local to create a local testing environment that simulates the AWS runtime environment.

DNS based service discovery: eks, external DNS or cloudmap, ecs -> a registry of service names using the Route 53 Auto Naming API.

service mesh: communication between the services in eks.Typically, a service mesh is split into a data plane and a control plane. The data plane consists of a set of intelligent proxies that are deployed with the application code as a special sidecar proxy that intercepts all network communication between microservices. The control plane is responsible for communicating with the proxies.

Distributed data managment: step functions and kinesis, 

Asynchrones message and event passing: with sqs, sns, amazon mqwhich can be used if existing software is using open standard APIs and protocols for messaging, including JMS, NMS, AMQP, STOMP, MQTT, and WebSocket. and event bridge. these are decoupled arch one service down time will not impact on others where as in distributed arch one service down time will impact on other services.
Amazon MQ manages the administration and maintenance of ActiveMQ, a popular open-source message broker. The underlying infrastructure is automatically provisioned for high availability and message durability to support the reliability of your applications.

Orchestration and state management: step funtions, it will retry the if the state fails and uses amazon state language.Step Functions is part of the AWS serverless platform and supports orchestration of Lambda functions as well as applications based on compute resources, such as Amazon EC2, Amazon EKS, Amazon ECS, and additional services like Amazon SageMaker and AWS Glue. Step Functions manages the operations and underlying infrastructure for you to help ensure that your application is available at any scale.
Distributed monitoring: can use cloudwatch for infra monitor and set alarms with alerts, container insights to give cpu, memory, dish, network metrics.for eks and ecs we can use prometheues(amazon managed promethues) You can collect Prometheus metrics from Amazon EKS and Amazon ECS environments, using AWS Distro for OpenTelemetry or Prometheus servers as collection agents. The primary destinations for log files on AWS are Amazon S3 and Amazon CloudWatch Logs. For applications running on Amazon EC2 instances, a daemon is available to send log files to CloudWatch Logs. Lambda functions natively send their log output to CloudWatch Logs and Amazon ECS includes support for the awslogs log driver that enables the centralization of container logs to CloudWatch Logs. For Amazon EKS, either Fluent Bit or Fluentd can forward logs from the individual instances in the cluster to a centralized logging CloudWatch Logs where they are combined for higher-level reporting using Amazon OpenSearch Service and Kibana. Because of its smaller footprint and performance advantages, Fluent Bit is recommended instead of FluentD.

The following figure illustrates the logging capabilities of some of the services. Teams are then able to search and analyze these logs using tools like Amazon OpenSearch Service and Kibana. Amazon Athena can be used to run a one-time query against centralized log files in Amazon S3.

Distributed tracing: x-ray, AWS Distro for OpenTelemetry is a secure, production-ready, AWS-supported distribution of the OpenTelemetry project. Part of the Cloud Native Computing Foundation, AWS Distro for OpenTelemetry provides open-source APIs, libraries, and agents to collect distributed traces and metrics for application monitoring. With AWS Distro for OpenTelemetry, you can instrument your applications just one time to send correlated metrics and traces to multiple AWS and partner monitoring solutions. Use auto-instrumentation agents to collect traces without changing your code. AWS Distro for OpenTelemetry also collects metadata from your AWS resources and managed services to correlate application performance data with underlying infrastructure data, reducing the mean time to problem resolution. Use AWS Distro for OpenTelemetry to instrument your applications running on Amazon EC2, Amazon ECS, Amazon EKS on Amazon EC2, Fargate, and AWS Lambda, as well as on-premises.

Options for log analysis on AWS: Amazon CloudWatch Logs Insights enables you to explore, analyze, and visualize your logs instantly. This allows you to troubleshoot operational problems. Another option for analyzing log files is to use Amazon OpenSearch Service together with Kibana.

logs from aws services to -> cloudwatch-> opensearch -> kibana
logs from aws services to -> cloudwatch -> kinesis data firehouse -> redshift -> amazon quicksight
------------------------------------------------------------------------------------------------------------------------------------------------------------

white papaer: Web Application Hosting in the AWS Cloud:

Additional security features: shield - ddos , aws waf and firewall manager.
------------------------------------------------------------------------------------------------------------------------------------------------------------
Data Sync notes: to move data from onprem and aws and vice versa.


setup a agent in 8 vcpu and 32 memory, create a data transfer task and monitor it with cloudwatch.

from the data center server data sync agent will create the data on NFS protocal and send data to aws task with a high band with network connectivity setup such as WAN or direct connect over the TLS and copy the data to s3 or efs.

what kind of app's can be supported with data sync:

active application data: means the large amount data , which is not increase or decresse which is constance data
which is data processing applications: example, data processed by diff applications in real time.

scenario1: lets say an app is produsing the data to NFS  which you want to copy to aws using data sync. in this case using data agent move the data to s3, and on the same note if your latency based app want to access the data from s3 back onprem , we can setup a aws storage gateway on aws and aws file gateway on onprem to send the data to application.
------------------------------------------------------------------------------------------------------------------------------------------------------------

aws time steream with iot devices:
------------------------------------------------------------------------------------------------------------------------------------------------------------
sharedvpc
------------------------------------------------------------------------------------------------------------------------------------------------------------
apigateway integration with lambda and lambda authorizer 
------------------------------------------------------------------------------------------------------------------------------------------------------------
amazon aurora serverless
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws data migration service 
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws server migration service 
------------------------------------------------------------------------------------------------------------------------------------------------------------

aws application migration service:

aws recommands aws application migraiton service (AGN) for lift and shift, can also use aws sms and aws vm export/import

replatform: 
------------------------------------------------------------------------------------------------------------------------------------------------------------
migrate onprem application to aws (lift and shift)

------------------------------------------------------------------------------------------------------------------------------------------------------------
aws apigate apikey, rate limit, authenticain and authorization and api versiniong and apigateway CORS
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws kinesis components and its work flow with other aws services 

------------------------------------------------------------------------------------------------------------------------------------------------------------
s3 access points, s3 outpost, s3 accerlator, s3 lens 
------------------------------------------------------------------------------------------------------------------------------------------------------------
site to site vpn:

when to use site-to-site vpn and direct connect 

------------------------------------------------------------------------------------------------------------------------------------------------------------
direct connect:

------------------------------------------------------------------------------------------------------------------------------------------------------------
aws private link 


------------------------------------------------------------------------------------------------------------------------------------------------------------

aws reserved instance and compute plan diff
------------------------------------------------------------------------------------------------------------------------------------------------------------

aws event driven archetecture and aws serverless services:


------------------------------------------------------------------------------------------------------------------------------------------------------------
aws outpost supported services 

------------------------------------------------------------------------------------------------------------------------------------------------------------
aws vpn gateway

------------------------------------------------------------------------------------------------------------------------------------------------------------
aws network firewall, Aws sheild and sheild v2 and aws waf 

------------------------------------------------------------------------------------------------------------------------------------------------------------
aws cloudfront
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws xray
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws event bridge - event bus, event bus policy, invoke aws services in other account with event bus, event bridge scheduler 
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws cloudtrail - cloudtrail lake 
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws cognito for user authentication and authorization 

------------------------------------------------------------------------------------------------------------------------------------------------------------
aws opensearch and influx DB
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws DynamoDB DAX
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws KMS and CMK and cloudHSM
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws FXS for windows , ONTAP
------------------------------------------------------------------------------------------------------------------------------------------------------------
aws app sync for live application with match updates

------------------------------------------------------------------------------------------------------------------------------------------------------------

cloud migration staratagies:

look fo neal davis video for migration stratagies;


7rs of migration stratagies/aws migration service:
retire- retain
relocate and rehost(lift/shift)
repurchase and replatform
refactor 
re-hosting with migration tools
re-platforming with database migration service and elatic beanstalk
refactoring to cloudnative  archetecture 


------------------------------------------------------------------------------------------------------------------------------------------------------------


route53:

dns name service:

can route the traffic to public and private domains

routing policies:

simple routing policy; route traffic to single resource 
weight routing policy: use for active-passive failover - canary or blue green deployments
failover routing policy:
latency routing policy:
multivale answer routing:
geolocation routing:
route traffic based on geolocation of users
geoproximity routing:
route more or less traffic to a resource based on geolocation with bias 

route 53 dns requests for external entities:

route 53 record types:

what is name server in route53:

route 53 resolver rules and resolver endpoints:

route traffic to external domains by adding name servers of aws in third pary domain server: https://youtu.be/oKiojDyAuXg?si=Q9EbKTDJuy8dYalD

create a domain in thirdparty domain service, create the public domain in aws and copy the ns servers created, give the nameservers details in thirdparty domain 


install dig: dig +trace domainname

subdomain delegation: https://youtu.be/COaARRYXdts?si=FAZT_G8i6OO7bHtb, handle subbomains with one primary domain
------------------------------------------------------------------------------------------------------------------------------------------------------------












