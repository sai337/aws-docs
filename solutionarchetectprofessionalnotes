network connectivity stratagies: vpc peering, direct connect, transit gateway, private link, site-to-site vpn, aws vpn

security controls:

foundations
identity access managment - iam access analyzer, iam policies, roles, scp, resource policies and bucket policies - iam , iam identity center(sso), cognito and sts
Data protection - KMS, cloudHSM

applation security: like sql injection or cross site - network firewall, waf, sheild, sheild, firewall manager 


-----------------------------------------------------------------------------------------------------------------------------------
white paper: Implementing Microservices on AWS

RDS - 6 engines- can not autoscale on demand
nosql - autoscale on demand - dynamoDB, DynamoDB DAX

api implementaion -> cloudfront -> apigateway -> backed ec2, lambda, ecs or eks
Requests from mobile devices, websites, or other backend services are routed to the closest CloudFront Point of Presence (PoP) to minimize latency and provide optimum user experience.


serverless microservices:

ui -> cloudfront - s3, backend -> apigateway-> lambda , Db-> aurora, DynamoDB

Disaster recovery:
typical microservices applications are implemented using the Twelve-Factor Application patterns

Recovery time objective is the maximum acceptable delay between the interruption of service and restoration of service. This objective determines what is considered an acceptable time window when service is unavailable and is defined by the organization.

Recovery point objective is the maximum acceptable amount of time since the last data recovery point. This objective determines what is considered an acceptable loss of data between the last recovery point and the interruption of service and is defined by the organization.

high availabity:

eks - runs control plane runs , 2 api servers , 3 etcd across az's
lambdaa - runs across az's incase of service interruptions in any az.

deploying lambda based apps: aws sam - AWS SAM is natively supported by AWS CloudFormation and defines a simplified syntax for expressing serverless resources. To deploy your application, specify the resources you need as part of your application, along with their associated permissions policies in a AWS CloudFormation template, package your deployment artifacts, and deploy the template. Based on AWS SAM, SAM Local is an AWS Command Line Interface (AWS CLI) tool that provides an environment for you to develop, test, and analyze your serverless applications locally before uploading them to the Lambda runtime. You can use AWS SAM Local to create a local testing environment that simulates the AWS runtime environment.

DNS based service discovery: eks, external DNS or cloudmap, ecs -> a registry of service names using the Route 53 Auto Naming API.

service mesh: communication between the services in eks.Typically, a service mesh is split into a data plane and a control plane. The data plane consists of a set of intelligent proxies that are deployed with the application code as a special sidecar proxy that intercepts all network communication between microservices. The control plane is responsible for communicating with the proxies.

Distributed data managment: step functions and kinesis, 

Asynchrones message and event passing: with sqs, sns, amazon mqwhich can be used if existing software is using open standard APIs and protocols for messaging, including JMS, NMS, AMQP, STOMP, MQTT, and WebSocket. and event bridge. these are decoupled arch one service down time will not impact on others where as in distributed arch one service down time will impact on other services.
-----------------------------------------------------------------------------------------------------------------------------------
